{"ast":null,"code":"var _jsxFileName = \"/Users/gaylemcclure/Dev/water-app/src/routes/WaterPage.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport WaterGlass from '../components/WaterGlass'; //import Questions from './Questions';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction WaterPage() {\n  _s();\n\n  const [time, setTime] = useState([]);\n  const [counter, setCounter] = useState(60);\n  const [minutes, setMinutes] = useState(); //const [countdown, setCountdown] = useState([]);\n\n  let today = new Date();\n  let currentTime = today.getHours() + \":\" + today.getMinutes();\n  let currentHour = today.getHours();\n  useEffect(() => {\n    const time = JSON.parse(localStorage.getItem('time'));\n\n    if (time) {\n      setTime(time);\n    }\n  }, []); // useEffect(() => {\n  //   const countdown = JSON.parse(localStorage.getItem('countdown'));\n  //   if (countdown) {\n  //    setCountdown(countdown);\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\n\n    if (counter === 0) {\n      setMinutes(minutes - 1);\n      setCounter(59);\n    }\n\n    if (minutes === 0) {\n      setMinutes(30);\n    }\n  }, [counter]); // function calculateTime() {\n  //   let start = time.startValue;\n  //   let end = time.endValue\n  //   let difference = end - start\n  //   let remindAmountofTimes = Math.floor(difference / time.remindValue)\n  //   let drinkAmount = Math.floor((sliderValue * 1000) / remindAmountofTimes)\n  //   let remind = parseInt(time.remindValue);\n  //   switch (remind) {\n  //     case 1:\n  //       setCountdown(30)\n  //       break;\n  //     case 2:\n  //       setCountdown(45)\n  //       break;\n  //     case 3:\n  //       setCountdown(60.00)\n  //       break;\n  //     default:\n  //       setCountdown(90.00)\n  //   }\n  //   console.log(countdown)\n  // }\n\n  const calculateTime = () => {\n    setMinutes(time.remindValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"test-text\",\n      children: [\"Amount of water to drink is \", time.waterAmount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), calculateTime, /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Time now is \", currentTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"The countdown is \", time.remindAmount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), currentHour > time.endValue ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Stop drinking water! You can reset again tomorrow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 38\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Keep drinking!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 97\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: counter < 10 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Countdown: \", minutes, \":0\", counter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Countdown: \", minutes, \":\", counter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 68\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WaterGlass, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-button\",\n      children: \"I drank water!! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WaterPage, \"zNKyjQqHtr7CwJF8y3TvVFhUv5w=\");\n\n_c = WaterPage;\nexport default WaterPage; //If the timer only resets every time you click the button, there should be a point at the end time\n//when it stops calculating (ie.7pm) then displays how much water you drank based on the amount to drink each time\n//and the amount of times you click the button. \n//Also - an alarm that goes off when the times reaches 0\n\nvar _c;\n\n$RefreshReg$(_c, \"WaterPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","WaterGlass","WaterPage","time","setTime","counter","setCounter","minutes","setMinutes","today","Date","currentTime","getHours","getMinutes","currentHour","JSON","parse","localStorage","getItem","setTimeout","calculateTime","remindValue","waterAmount","remindAmount","endValue"],"sources":["/Users/gaylemcclure/Dev/water-app/src/routes/WaterPage.js"],"sourcesContent":["import { React, useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\"\nimport WaterGlass from '../components/WaterGlass';\n//import Questions from './Questions';\n\nfunction WaterPage() {\n\n  const [time, setTime] = useState([]);\n  const [counter, setCounter] = useState(60);\n  const [minutes, setMinutes] = useState();\n  //const [countdown, setCountdown] = useState([]);\n\n  let today = new Date();\n  let currentTime = today.getHours() + \":\" + today.getMinutes();\n  let currentHour = today.getHours();\n  \n\n  useEffect(() => {\n    const time = JSON.parse(localStorage.getItem('time'));\n    if (time) {\n     setTime(time);\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   const countdown = JSON.parse(localStorage.getItem('countdown'));\n  //   if (countdown) {\n  //    setCountdown(countdown);\n  //   }\n  // }, []);\n\n\n  \n  useEffect(() => {\n    counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\n    if(counter === 0) {\n      setMinutes(minutes-1)\n      setCounter(59)\n    }\n    if (minutes === 0) {\n      setMinutes(30)\n    }\n\n  }, [counter]);\n\n  // function calculateTime() {\n  //   let start = time.startValue;\n  //   let end = time.endValue\n  //   let difference = end - start\n  //   let remindAmountofTimes = Math.floor(difference / time.remindValue)\n  //   let drinkAmount = Math.floor((sliderValue * 1000) / remindAmountofTimes)\n    \n  //   let remind = parseInt(time.remindValue);\n  //   switch (remind) {\n  //     case 1:\n  //       setCountdown(30)\n  //       break;\n  //     case 2:\n  //       setCountdown(45)\n  //       break;\n  //     case 3:\n  //       setCountdown(60.00)\n  //       break;\n  //     default:\n  //       setCountdown(90.00)\n  //   }\n  //   console.log(countdown)\n\n  // }\n  const calculateTime = (() => {\n    setMinutes(time.remindValue)\n  })\n\n\n  return (\n    <>\n      <h1 className=\"test-text\">Amount of water to drink is {time.waterAmount}</h1>\n      {calculateTime}\n      <h1>Time now is {currentTime}</h1>\n      <h1>The countdown is {time.remindAmount}</h1>\n      {currentHour > time.endValue ? <p>Stop drinking water! You can reset again tomorrow</p> : <p>Keep drinking!!</p>}\n      <div className=\"timer\">\n      {counter < 10 ? <div>Countdown: {minutes}:0{counter}</div> : <div>Countdown: {minutes}:{counter}</div>} \n      </div>\n      <WaterGlass />\n      <button className=\"reset-button\">I drank water!! </button>\n      <Link to=\"/\"><button>Reset</button></Link>\n    </>\n  )\n}\n\nexport default WaterPage;\n\n\n//If the timer only resets every time you click the button, there should be a point at the end time\n//when it stops calculating (ie.7pm) then displays how much water you drank based on the amount to drink each time\n//and the amount of times you click the button. \n//Also - an alarm that goes off when the times reaches 0\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}