{"ast":null,"code":"'use strict';\n\nconst fs = require('../fs');\n\nconst path = require('path');\n\nconst {\n  copy\n} = require('../copy');\n\nconst {\n  remove\n} = require('../remove');\n\nconst {\n  mkdirp\n} = require('../mkdirs');\n\nconst {\n  pathExists\n} = require('../path-exists');\n\nconst stat = require('../util/stat');\n\nasync function move(src, dest) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const overwrite = opts.overwrite || opts.clobber || false;\n  const {\n    srcStat,\n    isChangingCase = false\n  } = await stat.checkPaths(src, dest, 'move', opts);\n  await stat.checkParentPaths(src, srcStat, dest, 'move'); // If the parent of dest is not root, make sure it exists before proceeding\n\n  const destParent = path.dirname(dest);\n  const parsedParentPath = path.parse(destParent);\n\n  if (parsedParentPath.root !== destParent) {\n    await mkdirp(destParent);\n  }\n\n  return doRename(src, dest, overwrite, isChangingCase);\n}\n\nasync function doRename(src, dest, overwrite, isChangingCase) {\n  if (!isChangingCase) {\n    if (overwrite) {\n      await remove(dest);\n    } else if (await pathExists(dest)) {\n      throw new Error('dest already exists.');\n    }\n  }\n\n  try {\n    // Try w/ rename first, and try copy + remove if EXDEV\n    await fs.rename(src, dest);\n  } catch (err) {\n    if (err.code !== 'EXDEV') {\n      throw err;\n    }\n\n    await moveAcrossDevice(src, dest, overwrite);\n  }\n}\n\nasync function moveAcrossDevice(src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  };\n  await copy(src, dest, opts);\n  return remove(src);\n}\n\nmodule.exports = move;","map":{"version":3,"names":["fs","require","path","copy","remove","mkdirp","pathExists","stat","move","src","dest","opts","overwrite","clobber","srcStat","isChangingCase","checkPaths","checkParentPaths","destParent","dirname","parsedParentPath","parse","root","doRename","Error","rename","err","code","moveAcrossDevice","errorOnExist","preserveTimestamps","module","exports"],"sources":["C:/Users/gayle/Dev/hydration-app/node_modules/gh-pages/node_modules/fs-extra/lib/move/move.js"],"sourcesContent":["'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst { copy } = require('../copy')\nconst { remove } = require('../remove')\nconst { mkdirp } = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst stat = require('../util/stat')\n\nasync function move (src, dest, opts = {}) {\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  const { srcStat, isChangingCase = false } = await stat.checkPaths(src, dest, 'move', opts)\n\n  await stat.checkParentPaths(src, srcStat, dest, 'move')\n\n  // If the parent of dest is not root, make sure it exists before proceeding\n  const destParent = path.dirname(dest)\n  const parsedParentPath = path.parse(destParent)\n  if (parsedParentPath.root !== destParent) {\n    await mkdirp(destParent)\n  }\n\n  return doRename(src, dest, overwrite, isChangingCase)\n}\n\nasync function doRename (src, dest, overwrite, isChangingCase) {\n  if (!isChangingCase) {\n    if (overwrite) {\n      await remove(dest)\n    } else if (await pathExists(dest)) {\n      throw new Error('dest already exists.')\n    }\n  }\n\n  try {\n    // Try w/ rename first, and try copy + remove if EXDEV\n    await fs.rename(src, dest)\n  } catch (err) {\n    if (err.code !== 'EXDEV') {\n      throw err\n    }\n    await moveAcrossDevice(src, dest, overwrite)\n  }\n}\n\nasync function moveAcrossDevice (src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n\n  await copy(src, dest, opts)\n  return remove(src)\n}\n\nmodule.exports = move\n"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,OAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;EAAEE;AAAF,IAAWF,OAAO,CAAC,SAAD,CAAxB;;AACA,MAAM;EAAEG;AAAF,IAAaH,OAAO,CAAC,WAAD,CAA1B;;AACA,MAAM;EAAEI;AAAF,IAAaJ,OAAO,CAAC,WAAD,CAA1B;;AACA,MAAM;EAAEK;AAAF,IAAiBL,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMM,IAAI,GAAGN,OAAO,CAAC,cAAD,CAApB;;AAEA,eAAeO,IAAf,CAAqBC,GAArB,EAA0BC,IAA1B,EAA2C;EAAA,IAAXC,IAAW,uEAAJ,EAAI;EACzC,MAAMC,SAAS,GAAGD,IAAI,CAACC,SAAL,IAAkBD,IAAI,CAACE,OAAvB,IAAkC,KAApD;EAEA,MAAM;IAAEC,OAAF;IAAWC,cAAc,GAAG;EAA5B,IAAsC,MAAMR,IAAI,CAACS,UAAL,CAAgBP,GAAhB,EAAqBC,IAArB,EAA2B,MAA3B,EAAmCC,IAAnC,CAAlD;EAEA,MAAMJ,IAAI,CAACU,gBAAL,CAAsBR,GAAtB,EAA2BK,OAA3B,EAAoCJ,IAApC,EAA0C,MAA1C,CAAN,CALyC,CAOzC;;EACA,MAAMQ,UAAU,GAAGhB,IAAI,CAACiB,OAAL,CAAaT,IAAb,CAAnB;EACA,MAAMU,gBAAgB,GAAGlB,IAAI,CAACmB,KAAL,CAAWH,UAAX,CAAzB;;EACA,IAAIE,gBAAgB,CAACE,IAAjB,KAA0BJ,UAA9B,EAA0C;IACxC,MAAMb,MAAM,CAACa,UAAD,CAAZ;EACD;;EAED,OAAOK,QAAQ,CAACd,GAAD,EAAMC,IAAN,EAAYE,SAAZ,EAAuBG,cAAvB,CAAf;AACD;;AAED,eAAeQ,QAAf,CAAyBd,GAAzB,EAA8BC,IAA9B,EAAoCE,SAApC,EAA+CG,cAA/C,EAA+D;EAC7D,IAAI,CAACA,cAAL,EAAqB;IACnB,IAAIH,SAAJ,EAAe;MACb,MAAMR,MAAM,CAACM,IAAD,CAAZ;IACD,CAFD,MAEO,IAAI,MAAMJ,UAAU,CAACI,IAAD,CAApB,EAA4B;MACjC,MAAM,IAAIc,KAAJ,CAAU,sBAAV,CAAN;IACD;EACF;;EAED,IAAI;IACF;IACA,MAAMxB,EAAE,CAACyB,MAAH,CAAUhB,GAAV,EAAeC,IAAf,CAAN;EACD,CAHD,CAGE,OAAOgB,GAAP,EAAY;IACZ,IAAIA,GAAG,CAACC,IAAJ,KAAa,OAAjB,EAA0B;MACxB,MAAMD,GAAN;IACD;;IACD,MAAME,gBAAgB,CAACnB,GAAD,EAAMC,IAAN,EAAYE,SAAZ,CAAtB;EACD;AACF;;AAED,eAAegB,gBAAf,CAAiCnB,GAAjC,EAAsCC,IAAtC,EAA4CE,SAA5C,EAAuD;EACrD,MAAMD,IAAI,GAAG;IACXC,SADW;IAEXiB,YAAY,EAAE,IAFH;IAGXC,kBAAkB,EAAE;EAHT,CAAb;EAMA,MAAM3B,IAAI,CAACM,GAAD,EAAMC,IAAN,EAAYC,IAAZ,CAAV;EACA,OAAOP,MAAM,CAACK,GAAD,CAAb;AACD;;AAEDsB,MAAM,CAACC,OAAP,GAAiBxB,IAAjB"},"metadata":{},"sourceType":"script"}