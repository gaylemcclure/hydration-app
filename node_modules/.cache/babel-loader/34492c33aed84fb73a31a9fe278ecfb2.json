{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/validation_engine.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../core/class\";\nimport { extend } from \"../core/utils/extend\";\nimport { inArray } from \"../core/utils/array\";\nimport { each } from \"../core/utils/iterator\";\nimport { EventsStrategy } from \"../core/events_strategy\";\nimport errors from \"../core/errors\";\nimport { grep } from \"../core/utils/common\";\nimport { isDefined, isString, isDate, isBoolean, isObject, isFunction, isPromise, isNumeric } from \"../core/utils/type\";\nimport numberLocalization from \"../localization/number\";\nimport messageLocalization from \"../localization/message\";\nimport Promise from \"../core/polyfills/promise\";\nimport { fromPromise, Deferred } from \"../core/utils/deferred\";\nvar STATUS = {\n  valid: \"valid\",\n  invalid: \"invalid\",\n  pending: \"pending\"\n};\n\nclass BaseRuleValidator {\n  constructor() {\n    this.NAME = \"base\";\n  }\n\n  defaultMessage(value) {\n    return messageLocalization.getFormatter(\"validation-\".concat(this.NAME))(value);\n  }\n\n  defaultFormattedMessage(value) {\n    return messageLocalization.getFormatter(\"validation-\".concat(this.NAME, \"-formatted\"))(value);\n  }\n\n  _isValueEmpty(value) {\n    return !rulesValidators.required.validate(value, {});\n  }\n\n  validate(value, rule) {\n    var valueArray = Array.isArray(value) ? value : [value];\n    var result = true;\n\n    if (valueArray.length) {\n      valueArray.every(itemValue => {\n        result = this._validate(itemValue, rule);\n        return result;\n      });\n    } else {\n      result = this._validate(null, rule);\n    }\n\n    return result;\n  }\n\n}\n\nclass RequiredRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"required\";\n  }\n\n  _validate(value, rule) {\n    if (!isDefined(value)) {\n      return false;\n    }\n\n    if (false === value) {\n      return false;\n    }\n\n    value = String(value);\n\n    if (rule.trim || !isDefined(rule.trim)) {\n      value = value.trim();\n    }\n\n    return \"\" !== value;\n  }\n\n}\n\nclass NumericRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"numeric\";\n  }\n\n  _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    if (rule.useCultureSettings && isString(value)) {\n      return !isNaN(numberLocalization.parse(value));\n    } else {\n      return isNumeric(value);\n    }\n  }\n\n}\n\nclass RangeRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"range\";\n  }\n\n  _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    var validNumber = rulesValidators.numeric.validate(value, rule);\n    var validValue = isDefined(value) && \"\" !== value;\n    var number = validNumber ? parseFloat(value) : validValue && value.valueOf();\n    var min = rule.min;\n    var max = rule.max;\n\n    if (!(validNumber || isDate(value)) && !validValue) {\n      return false;\n    }\n\n    if (isDefined(min)) {\n      if (isDefined(max)) {\n        return number >= min && number <= max;\n      }\n\n      return number >= min;\n    } else if (isDefined(max)) {\n      return number <= max;\n    } else {\n      throw errors.Error(\"E0101\");\n    }\n  }\n\n}\n\nclass StringLengthRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"stringLength\";\n  }\n\n  _validate(value, rule) {\n    var _value;\n\n    value = String(null !== (_value = value) && void 0 !== _value ? _value : \"\");\n\n    if (rule.trim || !isDefined(rule.trim)) {\n      value = value.trim();\n    }\n\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    return rulesValidators.range.validate(value.length, extend({}, rule));\n  }\n\n}\n\nclass CustomRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"custom\";\n  }\n\n  validate(value, rule) {\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    var validator = rule.validator;\n    var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\n    var extraParams = isFunction(dataGetter) && dataGetter();\n    var params = {\n      value: value,\n      validator: validator,\n      rule: rule\n    };\n\n    if (extraParams) {\n      extend(params, extraParams);\n    }\n\n    return rule.validationCallback(params);\n  }\n\n}\n\nclass AsyncRuleValidator extends CustomRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"async\";\n  }\n\n  validate(value, rule) {\n    if (!isDefined(rule.reevaluate)) {\n      extend(rule, {\n        reevaluate: true\n      });\n    }\n\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    var validator = rule.validator;\n    var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\n    var extraParams = isFunction(dataGetter) && dataGetter();\n    var params = {\n      value: value,\n      validator: validator,\n      rule: rule\n    };\n\n    if (extraParams) {\n      extend(params, extraParams);\n    }\n\n    var callbackResult = rule.validationCallback(params);\n\n    if (!isPromise(callbackResult)) {\n      throw errors.Error(\"E0103\");\n    }\n\n    return this._getWrappedPromise(fromPromise(callbackResult).promise());\n  }\n\n  _getWrappedPromise(promise) {\n    var deferred = new Deferred();\n    promise.then(function (res) {\n      deferred.resolve(res);\n    }, function (err) {\n      var res = {\n        isValid: false\n      };\n\n      if (isDefined(err)) {\n        if (isString(err)) {\n          res.message = err;\n        } else if (isObject(err) && isDefined(err.message) && isString(err.message)) {\n          res.message = err.message;\n        }\n      }\n\n      deferred.resolve(res);\n    });\n    return deferred.promise();\n  }\n\n}\n\nclass CompareRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"compare\";\n  }\n\n  _validate(value, rule) {\n    if (!rule.comparisonTarget) {\n      throw errors.Error(\"E0102\");\n    }\n\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    extend(rule, {\n      reevaluate: true\n    });\n    var otherValue = rule.comparisonTarget();\n    var type = rule.comparisonType || \"==\";\n\n    switch (type) {\n      case \"==\":\n        return value == otherValue;\n\n      case \"!=\":\n        return value != otherValue;\n\n      case \"===\":\n        return value === otherValue;\n\n      case \"!==\":\n        return value !== otherValue;\n\n      case \">\":\n        return value > otherValue;\n\n      case \">=\":\n        return value >= otherValue;\n\n      case \"<\":\n        return value < otherValue;\n\n      case \"<=\":\n        return value <= otherValue;\n    }\n  }\n\n}\n\nclass PatternRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"pattern\";\n  }\n\n  _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    var pattern = rule.pattern;\n\n    if (isString(pattern)) {\n      pattern = new RegExp(pattern);\n    }\n\n    return pattern.test(value);\n  }\n\n}\n\nclass EmailRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"email\";\n  }\n\n  _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    return rulesValidators.pattern.validate(value, extend({}, rule, {\n      pattern: /^[\\d\\w._-]+@[\\d\\w._-]+\\.[\\w]+$/i\n    }));\n  }\n\n}\n\nvar rulesValidators = {\n  required: new RequiredRuleValidator(),\n  numeric: new NumericRuleValidator(),\n  range: new RangeRuleValidator(),\n  stringLength: new StringLengthRuleValidator(),\n  custom: new CustomRuleValidator(),\n  async: new AsyncRuleValidator(),\n  compare: new CompareRuleValidator(),\n  pattern: new PatternRuleValidator(),\n  email: new EmailRuleValidator()\n};\nvar GroupConfig = Class.inherit({\n  ctor(group) {\n    this.group = group;\n    this.validators = [];\n    this._pendingValidators = [];\n    this._onValidatorStatusChanged = this._onValidatorStatusChanged.bind(this);\n\n    this._resetValidationInfo();\n\n    this._eventsStrategy = new EventsStrategy(this);\n  },\n\n  validate() {\n    var result = {\n      isValid: true,\n      brokenRules: [],\n      validators: [],\n      status: STATUS.valid,\n      complete: null\n    };\n\n    this._unsubscribeFromAllChangeEvents();\n\n    this._pendingValidators = [];\n\n    this._resetValidationInfo();\n\n    each(this.validators, (_, validator) => {\n      var validatorResult = validator.validate();\n      result.isValid = result.isValid && validatorResult.isValid;\n\n      if (validatorResult.brokenRules) {\n        result.brokenRules = result.brokenRules.concat(validatorResult.brokenRules);\n      }\n\n      result.validators.push(validator);\n\n      if (validatorResult.status === STATUS.pending) {\n        this._addPendingValidator(validator);\n      }\n\n      this._subscribeToChangeEvents(validator);\n    });\n\n    if (this._pendingValidators.length) {\n      result.status = STATUS.pending;\n    } else {\n      result.status = result.isValid ? STATUS.valid : STATUS.invalid;\n\n      this._unsubscribeFromAllChangeEvents();\n\n      this._raiseValidatedEvent(result);\n    }\n\n    this._updateValidationInfo(result);\n\n    return extend({}, this._validationInfo.result);\n  },\n\n  _subscribeToChangeEvents(validator) {\n    validator.on(\"validating\", this._onValidatorStatusChanged);\n    validator.on(\"validated\", this._onValidatorStatusChanged);\n  },\n\n  _unsubscribeFromChangeEvents(validator) {\n    validator.off(\"validating\", this._onValidatorStatusChanged);\n    validator.off(\"validated\", this._onValidatorStatusChanged);\n  },\n\n  _unsubscribeFromAllChangeEvents() {\n    each(this.validators, (_, validator) => {\n      this._unsubscribeFromChangeEvents(validator);\n    });\n  },\n\n  _updateValidationInfo(result) {\n    this._validationInfo.result = result;\n\n    if (result.status !== STATUS.pending) {\n      return;\n    }\n\n    if (!this._validationInfo.deferred) {\n      this._validationInfo.deferred = new Deferred();\n      this._validationInfo.result.complete = this._validationInfo.deferred.promise();\n    }\n  },\n\n  _addPendingValidator(validator) {\n    var foundValidator = grep(this._pendingValidators, function (val) {\n      return val === validator;\n    })[0];\n\n    if (!foundValidator) {\n      this._pendingValidators.push(validator);\n    }\n  },\n\n  _removePendingValidator(validator) {\n    var index = inArray(validator, this._pendingValidators);\n\n    if (index >= 0) {\n      this._pendingValidators.splice(index, 1);\n    }\n  },\n\n  _orderBrokenRules(brokenRules) {\n    var orderedRules = [];\n    each(this.validators, function (_, validator) {\n      var foundRules = grep(brokenRules, function (rule) {\n        return rule.validator === validator;\n      });\n\n      if (foundRules.length) {\n        orderedRules = orderedRules.concat(foundRules);\n      }\n    });\n    return orderedRules;\n  },\n\n  _updateBrokenRules(result) {\n    if (!this._validationInfo.result) {\n      return;\n    }\n\n    var brokenRules = this._validationInfo.result.brokenRules;\n    var rules = grep(brokenRules, function (rule) {\n      return rule.validator !== result.validator;\n    });\n\n    if (result.brokenRules) {\n      brokenRules = rules.concat(result.brokenRules);\n    }\n\n    this._validationInfo.result.brokenRules = this._orderBrokenRules(brokenRules);\n  },\n\n  _onValidatorStatusChanged(result) {\n    if (result.status === STATUS.pending) {\n      this._addPendingValidator(result.validator);\n\n      return;\n    }\n\n    this._resolveIfComplete(result);\n  },\n\n  _resolveIfComplete(result) {\n    this._removePendingValidator(result.validator);\n\n    this._updateBrokenRules(result);\n\n    if (!this._pendingValidators.length) {\n      this._unsubscribeFromAllChangeEvents();\n\n      if (!this._validationInfo.result) {\n        return;\n      }\n\n      this._validationInfo.result.status = 0 === this._validationInfo.result.brokenRules.length ? STATUS.valid : STATUS.invalid;\n      this._validationInfo.result.isValid = this._validationInfo.result.status === STATUS.valid;\n      var res = extend({}, this._validationInfo.result, {\n        complete: null\n      });\n      var deferred = this._validationInfo.deferred;\n      this._validationInfo.deferred = null;\n\n      this._raiseValidatedEvent(res);\n\n      deferred && setTimeout(() => {\n        deferred.resolve(res);\n      });\n    }\n  },\n\n  _raiseValidatedEvent(result) {\n    this._eventsStrategy.fireEvent(\"validated\", [result]);\n  },\n\n  _resetValidationInfo() {\n    this._validationInfo = {\n      result: null,\n      deferred: null\n    };\n  },\n\n  _synchronizeValidationInfo() {\n    if (this._validationInfo.result) {\n      this._validationInfo.result.validators = this.validators;\n    }\n  },\n\n  removeRegisteredValidator(validator) {\n    var index = inArray(validator, this.validators);\n\n    if (index > -1) {\n      this.validators.splice(index, 1);\n\n      this._synchronizeValidationInfo();\n\n      this._resolveIfComplete({\n        validator: validator\n      });\n    }\n  },\n\n  registerValidator(validator) {\n    if (inArray(validator, this.validators) < 0) {\n      this.validators.push(validator);\n\n      this._synchronizeValidationInfo();\n    }\n  },\n\n  reset() {\n    each(this.validators, function (_, validator) {\n      validator.reset();\n    });\n    this._pendingValidators = [];\n\n    this._resetValidationInfo();\n  },\n\n  on(eventName, eventHandler) {\n    this._eventsStrategy.on(eventName, eventHandler);\n\n    return this;\n  },\n\n  off(eventName, eventHandler) {\n    this._eventsStrategy.off(eventName, eventHandler);\n\n    return this;\n  }\n\n});\nvar ValidationEngine = {\n  groups: [],\n\n  getGroupConfig(group) {\n    var result = grep(this.groups, function (config) {\n      return config.group === group;\n    });\n\n    if (result.length) {\n      return result[0];\n    }\n  },\n\n  findGroup($element, model) {\n    var $dxGroup = $element.parents(\".dx-validationgroup\").first();\n\n    if ($dxGroup.length) {\n      return $dxGroup.dxValidationGroup(\"instance\");\n    }\n\n    return model;\n  },\n\n  initGroups() {\n    this.groups = [];\n    this.addGroup();\n  },\n\n  addGroup(group) {\n    var config = this.getGroupConfig(group);\n\n    if (!config) {\n      config = new GroupConfig(group);\n      this.groups.push(config);\n    }\n\n    return config;\n  },\n\n  removeGroup(group) {\n    var config = this.getGroupConfig(group);\n    var index = inArray(config, this.groups);\n\n    if (index > -1) {\n      this.groups.splice(index, 1);\n    }\n\n    return config;\n  },\n\n  _setDefaultMessage(info) {\n    var {\n      rule: rule,\n      validator: validator,\n      name: name\n    } = info;\n\n    if (!isDefined(rule.message)) {\n      if (validator.defaultFormattedMessage && isDefined(name)) {\n        rule.message = validator.defaultFormattedMessage(name);\n      } else {\n        rule.message = validator.defaultMessage();\n      }\n    }\n  },\n\n  _addBrokenRule(info) {\n    var {\n      result: result,\n      rule: rule\n    } = info;\n\n    if (!result.brokenRule) {\n      result.brokenRule = rule;\n    }\n\n    if (!result.brokenRules) {\n      result.brokenRules = [];\n    }\n\n    result.brokenRules.push(rule);\n  },\n\n  validate(value, rules, name) {\n    var _rules$;\n\n    var result = {\n      name: name,\n      value: value,\n      brokenRule: null,\n      brokenRules: null,\n      isValid: true,\n      validationRules: rules,\n      pendingRules: null,\n      status: STATUS.valid,\n      complete: null\n    };\n    var validator = null === rules || void 0 === rules ? void 0 : null === (_rules$ = rules[0]) || void 0 === _rules$ ? void 0 : _rules$.validator;\n    var asyncRuleItems = [];\n    each(rules || [], (_, rule) => {\n      var ruleValidator = rulesValidators[rule.type];\n      var ruleValidationResult;\n\n      if (ruleValidator) {\n        if (isDefined(rule.isValid) && rule.value === value && !rule.reevaluate) {\n          if (!rule.isValid) {\n            result.isValid = false;\n\n            this._addBrokenRule({\n              result: result,\n              rule: rule\n            });\n\n            return false;\n          }\n\n          return true;\n        }\n\n        rule.value = value;\n\n        if (\"async\" === rule.type) {\n          asyncRuleItems.push({\n            rule: rule,\n            ruleValidator: ruleValidator\n          });\n          return true;\n        }\n\n        ruleValidationResult = ruleValidator.validate(value, rule);\n        rule.isValid = ruleValidationResult;\n\n        if (!ruleValidationResult) {\n          result.isValid = false;\n\n          this._setDefaultMessage({\n            rule: rule,\n            validator: ruleValidator,\n            name: name\n          });\n\n          this._addBrokenRule({\n            result: result,\n            rule: rule\n          });\n        }\n\n        if (!rule.isValid) {\n          return false;\n        }\n      } else {\n        throw errors.Error(\"E0100\");\n      }\n    });\n\n    if (result.isValid && !result.brokenRules && asyncRuleItems.length) {\n      result = this._validateAsyncRules({\n        value: value,\n        items: asyncRuleItems,\n        result: result,\n        name: name\n      });\n    }\n\n    this._synchronizeGroupValidationInfo(validator, result);\n\n    result.status = result.pendingRules ? STATUS.pending : result.isValid ? STATUS.valid : STATUS.invalid;\n    return result;\n  },\n\n  _synchronizeGroupValidationInfo(validator, result) {\n    var _result$brokenRules;\n\n    if (!validator) {\n      return;\n    }\n\n    var groupConfig = ValidationEngine.getGroupConfig(validator._validationGroup);\n\n    groupConfig._updateBrokenRules.call(groupConfig, {\n      validator: validator,\n      brokenRules: null !== (_result$brokenRules = result.brokenRules) && void 0 !== _result$brokenRules ? _result$brokenRules : []\n    });\n  },\n\n  _validateAsyncRules(_ref) {\n    var {\n      result: result,\n      value: value,\n      items: items,\n      name: name\n    } = _ref;\n    var asyncResults = [];\n    each(items, (_, item) => {\n      var validateResult = item.ruleValidator.validate(value, item.rule);\n\n      if (!isPromise(validateResult)) {\n        this._updateRuleConfig({\n          rule: item.rule,\n          ruleResult: this._getPatchedRuleResult(validateResult),\n          validator: item.ruleValidator,\n          name: name\n        });\n      } else {\n        if (!result.pendingRules) {\n          result.pendingRules = [];\n        }\n\n        result.pendingRules.push(item.rule);\n        var asyncResult = validateResult.then(res => {\n          var ruleResult = this._getPatchedRuleResult(res);\n\n          this._updateRuleConfig({\n            rule: item.rule,\n            ruleResult: ruleResult,\n            validator: item.ruleValidator,\n            name: name\n          });\n\n          return ruleResult;\n        });\n        asyncResults.push(asyncResult);\n      }\n    });\n\n    if (asyncResults.length) {\n      result.complete = Promise.all(asyncResults).then(values => this._getAsyncRulesResult({\n        result: result,\n        values: values\n      }));\n    }\n\n    return result;\n  },\n\n  _updateRuleConfig(_ref2) {\n    var {\n      rule: rule,\n      ruleResult: ruleResult,\n      validator: validator,\n      name: name\n    } = _ref2;\n    rule.isValid = ruleResult.isValid;\n\n    if (!ruleResult.isValid) {\n      if (isDefined(ruleResult.message) && isString(ruleResult.message) && ruleResult.message.length) {\n        rule.message = ruleResult.message;\n      } else {\n        this._setDefaultMessage({\n          rule: rule,\n          validator: validator,\n          name: name\n        });\n      }\n    }\n  },\n\n  _getPatchedRuleResult(ruleResult) {\n    var result;\n\n    if (isObject(ruleResult)) {\n      result = extend({}, ruleResult);\n\n      if (!isDefined(result.isValid)) {\n        result.isValid = true;\n      }\n    } else {\n      result = {\n        isValid: isBoolean(ruleResult) ? ruleResult : true\n      };\n    }\n\n    return result;\n  },\n\n  _getAsyncRulesResult(_ref3) {\n    var {\n      values: values,\n      result: result\n    } = _ref3;\n    each(values, (index, val) => {\n      if (false === val.isValid) {\n        result.isValid = val.isValid;\n        var rule = result.pendingRules[index];\n\n        this._addBrokenRule({\n          result: result,\n          rule: rule\n        });\n      }\n    });\n    result.pendingRules = null;\n    result.complete = null;\n    result.status = result.isValid ? STATUS.valid : STATUS.invalid;\n    return result;\n  },\n\n  registerValidatorInGroup(group, validator) {\n    var groupConfig = ValidationEngine.addGroup(group);\n    groupConfig.registerValidator.call(groupConfig, validator);\n  },\n\n  _shouldRemoveGroup(group, validatorsInGroup) {\n    var isDefaultGroup = void 0 === group;\n    var isValidationGroupInstance = group && \"dxValidationGroup\" === group.NAME;\n    return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length;\n  },\n\n  removeRegisteredValidator(group, validator) {\n    var config = ValidationEngine.getGroupConfig(group);\n\n    if (config) {\n      config.removeRegisteredValidator.call(config, validator);\n      var validatorsInGroup = config.validators;\n\n      if (this._shouldRemoveGroup(group, validatorsInGroup)) {\n        this.removeGroup(group);\n      }\n    }\n  },\n\n  initValidationOptions(options) {\n    var initedOptions = {};\n\n    if (options) {\n      [\"isValid\", \"validationStatus\", \"validationError\", \"validationErrors\"].forEach(prop => {\n        if (prop in options) {\n          extend(initedOptions, this.synchronizeValidationOptions({\n            name: prop,\n            value: options[prop]\n          }, options));\n        }\n      });\n    }\n\n    return initedOptions;\n  },\n\n  synchronizeValidationOptions(_ref4, options) {\n    var {\n      name: name,\n      value: value\n    } = _ref4;\n\n    switch (name) {\n      case \"validationStatus\":\n        var isValid = value === STATUS.valid || value === STATUS.pending;\n        return options.isValid !== isValid ? {\n          isValid: isValid\n        } : {};\n\n      case \"isValid\":\n        var {\n          validationStatus: validationStatus\n        } = options;\n        var newStatus = validationStatus;\n\n        if (value && validationStatus === STATUS.invalid) {\n          newStatus = STATUS.valid;\n        } else if (!value && validationStatus !== STATUS.invalid) {\n          newStatus = STATUS.invalid;\n        }\n\n        return newStatus !== validationStatus ? {\n          validationStatus: newStatus\n        } : {};\n\n      case \"validationErrors\":\n        var validationError = !value || !value.length ? null : value[0];\n        return options.validationError !== validationError ? {\n          validationError: validationError\n        } : {};\n\n      case \"validationError\":\n        var {\n          validationErrors: validationErrors\n        } = options;\n\n        if (!value && validationErrors) {\n          return {\n            validationErrors: null\n          };\n        } else if (value && !validationErrors) {\n          return {\n            validationErrors: [value]\n          };\n        } else if (value && validationErrors && value !== validationErrors[0]) {\n          validationErrors[0] = value;\n          return {\n            validationErrors: validationErrors.slice()\n          };\n        }\n\n    }\n\n    return {};\n  },\n\n  validateGroup(group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n\n    if (!groupConfig) {\n      throw errors.Error(\"E0110\");\n    }\n\n    return groupConfig.validate();\n  },\n\n  resetGroup(group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n\n    if (!groupConfig) {\n      throw errors.Error(\"E0110\");\n    }\n\n    return groupConfig.reset();\n  }\n\n};\nValidationEngine.initGroups();\nexport default ValidationEngine;","map":{"version":3,"names":["Class","extend","inArray","each","EventsStrategy","errors","grep","isDefined","isString","isDate","isBoolean","isObject","isFunction","isPromise","isNumeric","numberLocalization","messageLocalization","Promise","fromPromise","Deferred","STATUS","valid","invalid","pending","BaseRuleValidator","constructor","NAME","defaultMessage","value","getFormatter","concat","defaultFormattedMessage","_isValueEmpty","rulesValidators","required","validate","rule","valueArray","Array","isArray","result","length","every","itemValue","_validate","RequiredRuleValidator","String","trim","NumericRuleValidator","ignoreEmptyValue","useCultureSettings","isNaN","parse","RangeRuleValidator","validNumber","numeric","validValue","number","parseFloat","valueOf","min","max","Error","StringLengthRuleValidator","_value","range","CustomRuleValidator","validator","dataGetter","option","extraParams","params","validationCallback","AsyncRuleValidator","reevaluate","callbackResult","_getWrappedPromise","promise","deferred","then","res","resolve","err","isValid","message","CompareRuleValidator","comparisonTarget","otherValue","type","comparisonType","PatternRuleValidator","pattern","RegExp","test","EmailRuleValidator","stringLength","custom","async","compare","email","GroupConfig","inherit","ctor","group","validators","_pendingValidators","_onValidatorStatusChanged","bind","_resetValidationInfo","_eventsStrategy","brokenRules","status","complete","_unsubscribeFromAllChangeEvents","_","validatorResult","push","_addPendingValidator","_subscribeToChangeEvents","_raiseValidatedEvent","_updateValidationInfo","_validationInfo","on","_unsubscribeFromChangeEvents","off","foundValidator","val","_removePendingValidator","index","splice","_orderBrokenRules","orderedRules","foundRules","_updateBrokenRules","rules","_resolveIfComplete","setTimeout","fireEvent","_synchronizeValidationInfo","removeRegisteredValidator","registerValidator","reset","eventName","eventHandler","ValidationEngine","groups","getGroupConfig","config","findGroup","$element","model","$dxGroup","parents","first","dxValidationGroup","initGroups","addGroup","removeGroup","_setDefaultMessage","info","name","_addBrokenRule","brokenRule","_rules$","validationRules","pendingRules","asyncRuleItems","ruleValidator","ruleValidationResult","_validateAsyncRules","items","_synchronizeGroupValidationInfo","_result$brokenRules","groupConfig","_validationGroup","call","_ref","asyncResults","item","validateResult","_updateRuleConfig","ruleResult","_getPatchedRuleResult","asyncResult","all","values","_getAsyncRulesResult","_ref2","_ref3","registerValidatorInGroup","_shouldRemoveGroup","validatorsInGroup","isDefaultGroup","isValidationGroupInstance","initValidationOptions","options","initedOptions","forEach","prop","synchronizeValidationOptions","_ref4","validationStatus","newStatus","validationError","validationErrors","slice","validateGroup","resetGroup"],"sources":["/Users/gaylemcclure/Dev/water-app/node_modules/devextreme/esm/ui/validation_engine.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/validation_engine.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Class from \"../core/class\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    inArray\r\n} from \"../core/utils/array\";\r\nimport {\r\n    each\r\n} from \"../core/utils/iterator\";\r\nimport {\r\n    EventsStrategy\r\n} from \"../core/events_strategy\";\r\nimport errors from \"../core/errors\";\r\nimport {\r\n    grep\r\n} from \"../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isString,\r\n    isDate,\r\n    isBoolean,\r\n    isObject,\r\n    isFunction,\r\n    isPromise,\r\n    isNumeric\r\n} from \"../core/utils/type\";\r\nimport numberLocalization from \"../localization/number\";\r\nimport messageLocalization from \"../localization/message\";\r\nimport Promise from \"../core/polyfills/promise\";\r\nimport {\r\n    fromPromise,\r\n    Deferred\r\n} from \"../core/utils/deferred\";\r\nvar STATUS = {\r\n    valid: \"valid\",\r\n    invalid: \"invalid\",\r\n    pending: \"pending\"\r\n};\r\nclass BaseRuleValidator {\r\n    constructor() {\r\n        this.NAME = \"base\"\r\n    }\r\n    defaultMessage(value) {\r\n        return messageLocalization.getFormatter(\"validation-\".concat(this.NAME))(value)\r\n    }\r\n    defaultFormattedMessage(value) {\r\n        return messageLocalization.getFormatter(\"validation-\".concat(this.NAME, \"-formatted\"))(value)\r\n    }\r\n    _isValueEmpty(value) {\r\n        return !rulesValidators.required.validate(value, {})\r\n    }\r\n    validate(value, rule) {\r\n        var valueArray = Array.isArray(value) ? value : [value];\r\n        var result = true;\r\n        if (valueArray.length) {\r\n            valueArray.every(itemValue => {\r\n                result = this._validate(itemValue, rule);\r\n                return result\r\n            })\r\n        } else {\r\n            result = this._validate(null, rule)\r\n        }\r\n        return result\r\n    }\r\n}\r\nclass RequiredRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"required\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (!isDefined(value)) {\r\n            return false\r\n        }\r\n        if (false === value) {\r\n            return false\r\n        }\r\n        value = String(value);\r\n        if (rule.trim || !isDefined(rule.trim)) {\r\n            value = value.trim()\r\n        }\r\n        return \"\" !== value\r\n    }\r\n}\r\nclass NumericRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"numeric\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        if (rule.useCultureSettings && isString(value)) {\r\n            return !isNaN(numberLocalization.parse(value))\r\n        } else {\r\n            return isNumeric(value)\r\n        }\r\n    }\r\n}\r\nclass RangeRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"range\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var validNumber = rulesValidators.numeric.validate(value, rule);\r\n        var validValue = isDefined(value) && \"\" !== value;\r\n        var number = validNumber ? parseFloat(value) : validValue && value.valueOf();\r\n        var min = rule.min;\r\n        var max = rule.max;\r\n        if (!(validNumber || isDate(value)) && !validValue) {\r\n            return false\r\n        }\r\n        if (isDefined(min)) {\r\n            if (isDefined(max)) {\r\n                return number >= min && number <= max\r\n            }\r\n            return number >= min\r\n        } else if (isDefined(max)) {\r\n            return number <= max\r\n        } else {\r\n            throw errors.Error(\"E0101\")\r\n        }\r\n    }\r\n}\r\nclass StringLengthRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"stringLength\"\r\n    }\r\n    _validate(value, rule) {\r\n        var _value;\r\n        value = String(null !== (_value = value) && void 0 !== _value ? _value : \"\");\r\n        if (rule.trim || !isDefined(rule.trim)) {\r\n            value = value.trim()\r\n        }\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        return rulesValidators.range.validate(value.length, extend({}, rule))\r\n    }\r\n}\r\nclass CustomRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"custom\"\r\n    }\r\n    validate(value, rule) {\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var validator = rule.validator;\r\n        var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\r\n        var extraParams = isFunction(dataGetter) && dataGetter();\r\n        var params = {\r\n            value: value,\r\n            validator: validator,\r\n            rule: rule\r\n        };\r\n        if (extraParams) {\r\n            extend(params, extraParams)\r\n        }\r\n        return rule.validationCallback(params)\r\n    }\r\n}\r\nclass AsyncRuleValidator extends CustomRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"async\"\r\n    }\r\n    validate(value, rule) {\r\n        if (!isDefined(rule.reevaluate)) {\r\n            extend(rule, {\r\n                reevaluate: true\r\n            })\r\n        }\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var validator = rule.validator;\r\n        var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\r\n        var extraParams = isFunction(dataGetter) && dataGetter();\r\n        var params = {\r\n            value: value,\r\n            validator: validator,\r\n            rule: rule\r\n        };\r\n        if (extraParams) {\r\n            extend(params, extraParams)\r\n        }\r\n        var callbackResult = rule.validationCallback(params);\r\n        if (!isPromise(callbackResult)) {\r\n            throw errors.Error(\"E0103\")\r\n        }\r\n        return this._getWrappedPromise(fromPromise(callbackResult).promise())\r\n    }\r\n    _getWrappedPromise(promise) {\r\n        var deferred = new Deferred;\r\n        promise.then((function(res) {\r\n            deferred.resolve(res)\r\n        }), (function(err) {\r\n            var res = {\r\n                isValid: false\r\n            };\r\n            if (isDefined(err)) {\r\n                if (isString(err)) {\r\n                    res.message = err\r\n                } else if (isObject(err) && isDefined(err.message) && isString(err.message)) {\r\n                    res.message = err.message\r\n                }\r\n            }\r\n            deferred.resolve(res)\r\n        }));\r\n        return deferred.promise()\r\n    }\r\n}\r\nclass CompareRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"compare\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (!rule.comparisonTarget) {\r\n            throw errors.Error(\"E0102\")\r\n        }\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        extend(rule, {\r\n            reevaluate: true\r\n        });\r\n        var otherValue = rule.comparisonTarget();\r\n        var type = rule.comparisonType || \"==\";\r\n        switch (type) {\r\n            case \"==\":\r\n                return value == otherValue;\r\n            case \"!=\":\r\n                return value != otherValue;\r\n            case \"===\":\r\n                return value === otherValue;\r\n            case \"!==\":\r\n                return value !== otherValue;\r\n            case \">\":\r\n                return value > otherValue;\r\n            case \">=\":\r\n                return value >= otherValue;\r\n            case \"<\":\r\n                return value < otherValue;\r\n            case \"<=\":\r\n                return value <= otherValue\r\n        }\r\n    }\r\n}\r\nclass PatternRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"pattern\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var pattern = rule.pattern;\r\n        if (isString(pattern)) {\r\n            pattern = new RegExp(pattern)\r\n        }\r\n        return pattern.test(value)\r\n    }\r\n}\r\nclass EmailRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"email\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        return rulesValidators.pattern.validate(value, extend({}, rule, {\r\n            pattern: /^[\\d\\w._-]+@[\\d\\w._-]+\\.[\\w]+$/i\r\n        }))\r\n    }\r\n}\r\nvar rulesValidators = {\r\n    required: new RequiredRuleValidator,\r\n    numeric: new NumericRuleValidator,\r\n    range: new RangeRuleValidator,\r\n    stringLength: new StringLengthRuleValidator,\r\n    custom: new CustomRuleValidator,\r\n    async: new AsyncRuleValidator,\r\n    compare: new CompareRuleValidator,\r\n    pattern: new PatternRuleValidator,\r\n    email: new EmailRuleValidator\r\n};\r\nvar GroupConfig = Class.inherit({\r\n    ctor(group) {\r\n        this.group = group;\r\n        this.validators = [];\r\n        this._pendingValidators = [];\r\n        this._onValidatorStatusChanged = this._onValidatorStatusChanged.bind(this);\r\n        this._resetValidationInfo();\r\n        this._eventsStrategy = new EventsStrategy(this)\r\n    },\r\n    validate() {\r\n        var result = {\r\n            isValid: true,\r\n            brokenRules: [],\r\n            validators: [],\r\n            status: STATUS.valid,\r\n            complete: null\r\n        };\r\n        this._unsubscribeFromAllChangeEvents();\r\n        this._pendingValidators = [];\r\n        this._resetValidationInfo();\r\n        each(this.validators, (_, validator) => {\r\n            var validatorResult = validator.validate();\r\n            result.isValid = result.isValid && validatorResult.isValid;\r\n            if (validatorResult.brokenRules) {\r\n                result.brokenRules = result.brokenRules.concat(validatorResult.brokenRules)\r\n            }\r\n            result.validators.push(validator);\r\n            if (validatorResult.status === STATUS.pending) {\r\n                this._addPendingValidator(validator)\r\n            }\r\n            this._subscribeToChangeEvents(validator)\r\n        });\r\n        if (this._pendingValidators.length) {\r\n            result.status = STATUS.pending\r\n        } else {\r\n            result.status = result.isValid ? STATUS.valid : STATUS.invalid;\r\n            this._unsubscribeFromAllChangeEvents();\r\n            this._raiseValidatedEvent(result)\r\n        }\r\n        this._updateValidationInfo(result);\r\n        return extend({}, this._validationInfo.result)\r\n    },\r\n    _subscribeToChangeEvents(validator) {\r\n        validator.on(\"validating\", this._onValidatorStatusChanged);\r\n        validator.on(\"validated\", this._onValidatorStatusChanged)\r\n    },\r\n    _unsubscribeFromChangeEvents(validator) {\r\n        validator.off(\"validating\", this._onValidatorStatusChanged);\r\n        validator.off(\"validated\", this._onValidatorStatusChanged)\r\n    },\r\n    _unsubscribeFromAllChangeEvents() {\r\n        each(this.validators, (_, validator) => {\r\n            this._unsubscribeFromChangeEvents(validator)\r\n        })\r\n    },\r\n    _updateValidationInfo(result) {\r\n        this._validationInfo.result = result;\r\n        if (result.status !== STATUS.pending) {\r\n            return\r\n        }\r\n        if (!this._validationInfo.deferred) {\r\n            this._validationInfo.deferred = new Deferred;\r\n            this._validationInfo.result.complete = this._validationInfo.deferred.promise()\r\n        }\r\n    },\r\n    _addPendingValidator(validator) {\r\n        var foundValidator = grep(this._pendingValidators, (function(val) {\r\n            return val === validator\r\n        }))[0];\r\n        if (!foundValidator) {\r\n            this._pendingValidators.push(validator)\r\n        }\r\n    },\r\n    _removePendingValidator(validator) {\r\n        var index = inArray(validator, this._pendingValidators);\r\n        if (index >= 0) {\r\n            this._pendingValidators.splice(index, 1)\r\n        }\r\n    },\r\n    _orderBrokenRules(brokenRules) {\r\n        var orderedRules = [];\r\n        each(this.validators, (function(_, validator) {\r\n            var foundRules = grep(brokenRules, (function(rule) {\r\n                return rule.validator === validator\r\n            }));\r\n            if (foundRules.length) {\r\n                orderedRules = orderedRules.concat(foundRules)\r\n            }\r\n        }));\r\n        return orderedRules\r\n    },\r\n    _updateBrokenRules(result) {\r\n        if (!this._validationInfo.result) {\r\n            return\r\n        }\r\n        var brokenRules = this._validationInfo.result.brokenRules;\r\n        var rules = grep(brokenRules, (function(rule) {\r\n            return rule.validator !== result.validator\r\n        }));\r\n        if (result.brokenRules) {\r\n            brokenRules = rules.concat(result.brokenRules)\r\n        }\r\n        this._validationInfo.result.brokenRules = this._orderBrokenRules(brokenRules)\r\n    },\r\n    _onValidatorStatusChanged(result) {\r\n        if (result.status === STATUS.pending) {\r\n            this._addPendingValidator(result.validator);\r\n            return\r\n        }\r\n        this._resolveIfComplete(result)\r\n    },\r\n    _resolveIfComplete(result) {\r\n        this._removePendingValidator(result.validator);\r\n        this._updateBrokenRules(result);\r\n        if (!this._pendingValidators.length) {\r\n            this._unsubscribeFromAllChangeEvents();\r\n            if (!this._validationInfo.result) {\r\n                return\r\n            }\r\n            this._validationInfo.result.status = 0 === this._validationInfo.result.brokenRules.length ? STATUS.valid : STATUS.invalid;\r\n            this._validationInfo.result.isValid = this._validationInfo.result.status === STATUS.valid;\r\n            var res = extend({}, this._validationInfo.result, {\r\n                complete: null\r\n            });\r\n            var deferred = this._validationInfo.deferred;\r\n            this._validationInfo.deferred = null;\r\n            this._raiseValidatedEvent(res);\r\n            deferred && setTimeout(() => {\r\n                deferred.resolve(res)\r\n            })\r\n        }\r\n    },\r\n    _raiseValidatedEvent(result) {\r\n        this._eventsStrategy.fireEvent(\"validated\", [result])\r\n    },\r\n    _resetValidationInfo() {\r\n        this._validationInfo = {\r\n            result: null,\r\n            deferred: null\r\n        }\r\n    },\r\n    _synchronizeValidationInfo() {\r\n        if (this._validationInfo.result) {\r\n            this._validationInfo.result.validators = this.validators\r\n        }\r\n    },\r\n    removeRegisteredValidator(validator) {\r\n        var index = inArray(validator, this.validators);\r\n        if (index > -1) {\r\n            this.validators.splice(index, 1);\r\n            this._synchronizeValidationInfo();\r\n            this._resolveIfComplete({\r\n                validator: validator\r\n            })\r\n        }\r\n    },\r\n    registerValidator(validator) {\r\n        if (inArray(validator, this.validators) < 0) {\r\n            this.validators.push(validator);\r\n            this._synchronizeValidationInfo()\r\n        }\r\n    },\r\n    reset() {\r\n        each(this.validators, (function(_, validator) {\r\n            validator.reset()\r\n        }));\r\n        this._pendingValidators = [];\r\n        this._resetValidationInfo()\r\n    },\r\n    on(eventName, eventHandler) {\r\n        this._eventsStrategy.on(eventName, eventHandler);\r\n        return this\r\n    },\r\n    off(eventName, eventHandler) {\r\n        this._eventsStrategy.off(eventName, eventHandler);\r\n        return this\r\n    }\r\n});\r\nvar ValidationEngine = {\r\n    groups: [],\r\n    getGroupConfig(group) {\r\n        var result = grep(this.groups, (function(config) {\r\n            return config.group === group\r\n        }));\r\n        if (result.length) {\r\n            return result[0]\r\n        }\r\n    },\r\n    findGroup($element, model) {\r\n        var $dxGroup = $element.parents(\".dx-validationgroup\").first();\r\n        if ($dxGroup.length) {\r\n            return $dxGroup.dxValidationGroup(\"instance\")\r\n        }\r\n        return model\r\n    },\r\n    initGroups() {\r\n        this.groups = [];\r\n        this.addGroup()\r\n    },\r\n    addGroup(group) {\r\n        var config = this.getGroupConfig(group);\r\n        if (!config) {\r\n            config = new GroupConfig(group);\r\n            this.groups.push(config)\r\n        }\r\n        return config\r\n    },\r\n    removeGroup(group) {\r\n        var config = this.getGroupConfig(group);\r\n        var index = inArray(config, this.groups);\r\n        if (index > -1) {\r\n            this.groups.splice(index, 1)\r\n        }\r\n        return config\r\n    },\r\n    _setDefaultMessage(info) {\r\n        var {\r\n            rule: rule,\r\n            validator: validator,\r\n            name: name\r\n        } = info;\r\n        if (!isDefined(rule.message)) {\r\n            if (validator.defaultFormattedMessage && isDefined(name)) {\r\n                rule.message = validator.defaultFormattedMessage(name)\r\n            } else {\r\n                rule.message = validator.defaultMessage()\r\n            }\r\n        }\r\n    },\r\n    _addBrokenRule(info) {\r\n        var {\r\n            result: result,\r\n            rule: rule\r\n        } = info;\r\n        if (!result.brokenRule) {\r\n            result.brokenRule = rule\r\n        }\r\n        if (!result.brokenRules) {\r\n            result.brokenRules = []\r\n        }\r\n        result.brokenRules.push(rule)\r\n    },\r\n    validate(value, rules, name) {\r\n        var _rules$;\r\n        var result = {\r\n            name: name,\r\n            value: value,\r\n            brokenRule: null,\r\n            brokenRules: null,\r\n            isValid: true,\r\n            validationRules: rules,\r\n            pendingRules: null,\r\n            status: STATUS.valid,\r\n            complete: null\r\n        };\r\n        var validator = null === rules || void 0 === rules ? void 0 : null === (_rules$ = rules[0]) || void 0 === _rules$ ? void 0 : _rules$.validator;\r\n        var asyncRuleItems = [];\r\n        each(rules || [], (_, rule) => {\r\n            var ruleValidator = rulesValidators[rule.type];\r\n            var ruleValidationResult;\r\n            if (ruleValidator) {\r\n                if (isDefined(rule.isValid) && rule.value === value && !rule.reevaluate) {\r\n                    if (!rule.isValid) {\r\n                        result.isValid = false;\r\n                        this._addBrokenRule({\r\n                            result: result,\r\n                            rule: rule\r\n                        });\r\n                        return false\r\n                    }\r\n                    return true\r\n                }\r\n                rule.value = value;\r\n                if (\"async\" === rule.type) {\r\n                    asyncRuleItems.push({\r\n                        rule: rule,\r\n                        ruleValidator: ruleValidator\r\n                    });\r\n                    return true\r\n                }\r\n                ruleValidationResult = ruleValidator.validate(value, rule);\r\n                rule.isValid = ruleValidationResult;\r\n                if (!ruleValidationResult) {\r\n                    result.isValid = false;\r\n                    this._setDefaultMessage({\r\n                        rule: rule,\r\n                        validator: ruleValidator,\r\n                        name: name\r\n                    });\r\n                    this._addBrokenRule({\r\n                        result: result,\r\n                        rule: rule\r\n                    })\r\n                }\r\n                if (!rule.isValid) {\r\n                    return false\r\n                }\r\n            } else {\r\n                throw errors.Error(\"E0100\")\r\n            }\r\n        });\r\n        if (result.isValid && !result.brokenRules && asyncRuleItems.length) {\r\n            result = this._validateAsyncRules({\r\n                value: value,\r\n                items: asyncRuleItems,\r\n                result: result,\r\n                name: name\r\n            })\r\n        }\r\n        this._synchronizeGroupValidationInfo(validator, result);\r\n        result.status = result.pendingRules ? STATUS.pending : result.isValid ? STATUS.valid : STATUS.invalid;\r\n        return result\r\n    },\r\n    _synchronizeGroupValidationInfo(validator, result) {\r\n        var _result$brokenRules;\r\n        if (!validator) {\r\n            return\r\n        }\r\n        var groupConfig = ValidationEngine.getGroupConfig(validator._validationGroup);\r\n        groupConfig._updateBrokenRules.call(groupConfig, {\r\n            validator: validator,\r\n            brokenRules: null !== (_result$brokenRules = result.brokenRules) && void 0 !== _result$brokenRules ? _result$brokenRules : []\r\n        })\r\n    },\r\n    _validateAsyncRules(_ref) {\r\n        var {\r\n            result: result,\r\n            value: value,\r\n            items: items,\r\n            name: name\r\n        } = _ref;\r\n        var asyncResults = [];\r\n        each(items, (_, item) => {\r\n            var validateResult = item.ruleValidator.validate(value, item.rule);\r\n            if (!isPromise(validateResult)) {\r\n                this._updateRuleConfig({\r\n                    rule: item.rule,\r\n                    ruleResult: this._getPatchedRuleResult(validateResult),\r\n                    validator: item.ruleValidator,\r\n                    name: name\r\n                })\r\n            } else {\r\n                if (!result.pendingRules) {\r\n                    result.pendingRules = []\r\n                }\r\n                result.pendingRules.push(item.rule);\r\n                var asyncResult = validateResult.then(res => {\r\n                    var ruleResult = this._getPatchedRuleResult(res);\r\n                    this._updateRuleConfig({\r\n                        rule: item.rule,\r\n                        ruleResult: ruleResult,\r\n                        validator: item.ruleValidator,\r\n                        name: name\r\n                    });\r\n                    return ruleResult\r\n                });\r\n                asyncResults.push(asyncResult)\r\n            }\r\n        });\r\n        if (asyncResults.length) {\r\n            result.complete = Promise.all(asyncResults).then(values => this._getAsyncRulesResult({\r\n                result: result,\r\n                values: values\r\n            }))\r\n        }\r\n        return result\r\n    },\r\n    _updateRuleConfig(_ref2) {\r\n        var {\r\n            rule: rule,\r\n            ruleResult: ruleResult,\r\n            validator: validator,\r\n            name: name\r\n        } = _ref2;\r\n        rule.isValid = ruleResult.isValid;\r\n        if (!ruleResult.isValid) {\r\n            if (isDefined(ruleResult.message) && isString(ruleResult.message) && ruleResult.message.length) {\r\n                rule.message = ruleResult.message\r\n            } else {\r\n                this._setDefaultMessage({\r\n                    rule: rule,\r\n                    validator: validator,\r\n                    name: name\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _getPatchedRuleResult(ruleResult) {\r\n        var result;\r\n        if (isObject(ruleResult)) {\r\n            result = extend({}, ruleResult);\r\n            if (!isDefined(result.isValid)) {\r\n                result.isValid = true\r\n            }\r\n        } else {\r\n            result = {\r\n                isValid: isBoolean(ruleResult) ? ruleResult : true\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    _getAsyncRulesResult(_ref3) {\r\n        var {\r\n            values: values,\r\n            result: result\r\n        } = _ref3;\r\n        each(values, (index, val) => {\r\n            if (false === val.isValid) {\r\n                result.isValid = val.isValid;\r\n                var rule = result.pendingRules[index];\r\n                this._addBrokenRule({\r\n                    result: result,\r\n                    rule: rule\r\n                })\r\n            }\r\n        });\r\n        result.pendingRules = null;\r\n        result.complete = null;\r\n        result.status = result.isValid ? STATUS.valid : STATUS.invalid;\r\n        return result\r\n    },\r\n    registerValidatorInGroup(group, validator) {\r\n        var groupConfig = ValidationEngine.addGroup(group);\r\n        groupConfig.registerValidator.call(groupConfig, validator)\r\n    },\r\n    _shouldRemoveGroup(group, validatorsInGroup) {\r\n        var isDefaultGroup = void 0 === group;\r\n        var isValidationGroupInstance = group && \"dxValidationGroup\" === group.NAME;\r\n        return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length\r\n    },\r\n    removeRegisteredValidator(group, validator) {\r\n        var config = ValidationEngine.getGroupConfig(group);\r\n        if (config) {\r\n            config.removeRegisteredValidator.call(config, validator);\r\n            var validatorsInGroup = config.validators;\r\n            if (this._shouldRemoveGroup(group, validatorsInGroup)) {\r\n                this.removeGroup(group)\r\n            }\r\n        }\r\n    },\r\n    initValidationOptions(options) {\r\n        var initedOptions = {};\r\n        if (options) {\r\n            [\"isValid\", \"validationStatus\", \"validationError\", \"validationErrors\"].forEach(prop => {\r\n                if (prop in options) {\r\n                    extend(initedOptions, this.synchronizeValidationOptions({\r\n                        name: prop,\r\n                        value: options[prop]\r\n                    }, options))\r\n                }\r\n            })\r\n        }\r\n        return initedOptions\r\n    },\r\n    synchronizeValidationOptions(_ref4, options) {\r\n        var {\r\n            name: name,\r\n            value: value\r\n        } = _ref4;\r\n        switch (name) {\r\n            case \"validationStatus\":\r\n                var isValid = value === STATUS.valid || value === STATUS.pending;\r\n                return options.isValid !== isValid ? {\r\n                    isValid: isValid\r\n                } : {};\r\n            case \"isValid\":\r\n                var {\r\n                    validationStatus: validationStatus\r\n                } = options;\r\n                var newStatus = validationStatus;\r\n                if (value && validationStatus === STATUS.invalid) {\r\n                    newStatus = STATUS.valid\r\n                } else if (!value && validationStatus !== STATUS.invalid) {\r\n                    newStatus = STATUS.invalid\r\n                }\r\n                return newStatus !== validationStatus ? {\r\n                    validationStatus: newStatus\r\n                } : {};\r\n            case \"validationErrors\":\r\n                var validationError = !value || !value.length ? null : value[0];\r\n                return options.validationError !== validationError ? {\r\n                    validationError: validationError\r\n                } : {};\r\n            case \"validationError\":\r\n                var {\r\n                    validationErrors: validationErrors\r\n                } = options;\r\n                if (!value && validationErrors) {\r\n                    return {\r\n                        validationErrors: null\r\n                    }\r\n                } else if (value && !validationErrors) {\r\n                    return {\r\n                        validationErrors: [value]\r\n                    }\r\n                } else if (value && validationErrors && value !== validationErrors[0]) {\r\n                    validationErrors[0] = value;\r\n                    return {\r\n                        validationErrors: validationErrors.slice()\r\n                    }\r\n                }\r\n        }\r\n        return {}\r\n    },\r\n    validateGroup(group) {\r\n        var groupConfig = ValidationEngine.getGroupConfig(group);\r\n        if (!groupConfig) {\r\n            throw errors.Error(\"E0110\")\r\n        }\r\n        return groupConfig.validate()\r\n    },\r\n    resetGroup(group) {\r\n        var groupConfig = ValidationEngine.getGroupConfig(group);\r\n        if (!groupConfig) {\r\n            throw errors.Error(\"E0110\")\r\n        }\r\n        return groupConfig.reset()\r\n    }\r\n};\r\nValidationEngine.initGroups();\r\nexport default ValidationEngine;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}