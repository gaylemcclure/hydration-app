{"ast":null,"code":"var _jsxFileName = \"/Users/gaylemcclure/Dev/water-app/src/components/testDropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TestDropdown = _ref => {\n  _s();\n\n  let {\n    label,\n    options,\n    selected,\n    onSelectedChange\n  } = _ref;\n  // state to manage toggle visibility\n  const [open, setOpen] = useState(false); // set ref variable\n\n  const ref = useRef(); // close dropdown if clicked anywhere outside of dropdown\n  // on initial render, add click event listener\n\n  useEffect(() => {\n    const onBodyClick = event => {\n      // check if element that was clicked is inside of ref'd component\n      // if so no action is required from this event listener so exit\n      if (ref.current && ref.current.contains(event.target)) {\n        return;\n      } // else close the dropdown\n\n\n      setOpen(false);\n    }; // add event listener\n\n\n    document.body.addEventListener(\"click\", onBodyClick); // CLEANUP\n    // remove event listener\n\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick);\n    };\n  }, []); // map options from props\n\n  const renderedOptions = options.map(option => {\n    // if current selection is equal to option do not generate div\n    if (option.value === selected.value) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item\" // on click change selection to current option\n      ,\n      onClick: () => onSelectedChange(option),\n      children: option.label\n    }, option.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"ui form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        // on click set value of open to opposite of current value\n        onClick: () => setOpen(!open),\n        className: `ui selection dropdown ${open ? \"visible active\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"dropdown icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: selected.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          // on click set value of open to opposite of current value\n          onClick: () => setOpen(!open),\n          className: `menu ${open ? \"visible transition\" : \"\"}`,\n          children: renderedOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TestDropdown, \"wl9VvfhnMVWQ+kCekFjcRPEi3/0=\");\n\n_c = TestDropdown;\nexport default TestDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestDropdown\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TestDropdown","label","options","selected","onSelectedChange","open","setOpen","ref","onBodyClick","event","current","contains","target","document","body","addEventListener","removeEventListener","renderedOptions","map","option","value"],"sources":["/Users/gaylemcclure/Dev/water-app/src/components/testDropdown.js"],"sourcesContent":["\n\nimport React, { useState, useEffect, useRef } from \"react\"\n\nconst TestDropdown = ({ label, options, selected, onSelectedChange }) => {\n  // state to manage toggle visibility\n  const [open, setOpen] = useState(false)\n  // set ref variable\n  const ref = useRef()\n\n  // close dropdown if clicked anywhere outside of dropdown\n  // on initial render, add click event listener\n  useEffect(() => {\n    const onBodyClick = event => {\n      // check if element that was clicked is inside of ref'd component\n      // if so no action is required from this event listener so exit\n      if (ref.current && ref.current.contains(event.target)) {\n        return\n      }\n      // else close the dropdown\n      setOpen(false)\n    }\n\n    // add event listener\n    document.body.addEventListener(\"click\", onBodyClick)\n\n    // CLEANUP\n    // remove event listener\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick)\n    }\n  }, [])\n\n  // map options from props\n  const renderedOptions = options.map(option => {\n    // if current selection is equal to option do not generate div\n    if (option.value === selected.value) {\n      return null\n    }\n\n    return (\n      <div\n        key={option.value}\n        className=\"item\"\n        // on click change selection to current option\n        onClick={() => onSelectedChange(option)}\n      >\n        {option.label}\n      </div>\n    )\n  })\n\n  return (\n    <div ref={ref} className=\"ui form\">\n      <div className=\"field\">\n        <label className=\"label\">{label}</label>\n        <div\n          // on click set value of open to opposite of current value\n          onClick={() => setOpen(!open)}\n          className={`ui selection dropdown ${open ? \"visible active\" : \"\"}`}\n        >\n          <i className=\"dropdown icon\"></i>\n          <div className=\"text\">{selected.label}</div>\n          <div\n            // on click set value of open to opposite of current value\n            onClick={() => setOpen(!open)}\n            className={`menu ${open ? \"visible transition\" : \"\"}`}\n          >\n            {renderedOptions}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TestDropdown;\n"],"mappings":";;;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;;AAEA,MAAMC,YAAY,GAAG,QAAoD;EAAA;;EAAA,IAAnD;IAAEC,KAAF;IAASC,OAAT;IAAkBC,QAAlB;IAA4BC;EAA5B,CAAmD;EACvE;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,KAAD,CAAhC,CAFuE,CAGvE;;EACA,MAAMU,GAAG,GAAGR,MAAM,EAAlB,CAJuE,CAMvE;EACA;;EACAD,SAAS,CAAC,MAAM;IACd,MAAMU,WAAW,GAAGC,KAAK,IAAI;MAC3B;MACA;MACA,IAAIF,GAAG,CAACG,OAAJ,IAAeH,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAAnB,EAAuD;QACrD;MACD,CAL0B,CAM3B;;;MACAN,OAAO,CAAC,KAAD,CAAP;IACD,CARD,CADc,CAWd;;;IACAO,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,EAAwCP,WAAxC,EAZc,CAcd;IACA;;IACA,OAAO,MAAM;MACXK,QAAQ,CAACC,IAAT,CAAcE,mBAAd,CAAkC,OAAlC,EAA2CR,WAA3C;IACD,CAFD;EAGD,CAnBQ,EAmBN,EAnBM,CAAT,CARuE,CA6BvE;;EACA,MAAMS,eAAe,GAAGf,OAAO,CAACgB,GAAR,CAAYC,MAAM,IAAI;IAC5C;IACA,IAAIA,MAAM,CAACC,KAAP,KAAiBjB,QAAQ,CAACiB,KAA9B,EAAqC;MACnC,OAAO,IAAP;IACD;;IAED,oBACE;MAEE,SAAS,EAAC,MAFZ,CAGE;MAHF;MAIE,OAAO,EAAE,MAAMhB,gBAAgB,CAACe,MAAD,CAJjC;MAAA,UAMGA,MAAM,CAAClB;IANV,GACOkB,MAAM,CAACC,KADd;MAAA;MAAA;MAAA;IAAA,QADF;EAUD,CAhBuB,CAAxB;EAkBA,oBACE;IAAK,GAAG,EAAEb,GAAV;IAAe,SAAS,EAAC,SAAzB;IAAA,uBACE;MAAK,SAAS,EAAC,OAAf;MAAA,wBACE;QAAO,SAAS,EAAC,OAAjB;QAAA,UAA0BN;MAA1B;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE;QACA,OAAO,EAAE,MAAMK,OAAO,CAAC,CAACD,IAAF,CAFxB;QAGE,SAAS,EAAG,yBAAwBA,IAAI,GAAG,gBAAH,GAAsB,EAAG,EAHnE;QAAA,wBAKE;UAAG,SAAS,EAAC;QAAb;UAAA;UAAA;UAAA;QAAA,QALF,eAME;UAAK,SAAS,EAAC,MAAf;UAAA,UAAuBF,QAAQ,CAACF;QAAhC;UAAA;UAAA;UAAA;QAAA,QANF,eAOE;UACE;UACA,OAAO,EAAE,MAAMK,OAAO,CAAC,CAACD,IAAF,CAFxB;UAGE,SAAS,EAAG,QAAOA,IAAI,GAAG,oBAAH,GAA0B,EAAG,EAHtD;UAAA,UAKGY;QALH;UAAA;UAAA;UAAA;QAAA,QAPF;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAsBD,CAtED;;GAAMjB,Y;;KAAAA,Y;AAwEN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}